---
layout: post
title:  "동기/비동기, 블록/논블록"
date:   2022-03-07 16:07:59 +0900
categories: Windows JavaScript
---

<br>
<br>
아직도 정확히 말하라고 그러면 정확히 대답못하는 동기/비동기 블록/논블록 에 대해서 공부해보자. <br>
<br>
<br>

### 동기 / 비동기

<br>
카테고리에 js가 있는 이유는 내가 예전에 썼었고, 동기와 비동기의 차이에 대해서 js로 쉽게 설명 할 수 있을거 같아서이다. <br>
js에서는 콜백 함수를 엄청 많이 쓴다. <br>
콜백 함수를 대체하기 위해 나온 Promise 패턴도 많이 쓴다. <br>
Promise 를 대신하기 위해 나온(?) Async, Await 도 많이 쓴다. <br>
이것들이 전부 비동기다. <br>
call 한 시점에 진행 되는게 아닌것. <br>
동기는 call 한 시점에 진행 되는것. <br>
라고 개인적으로 생각하지만 사전적 정의 같은 관점에서 접근하는 면접에서 물어보면 잘 대답을 못할것 같다.. <br>

<br>
<br>
### 블록 / 논블록

<br>
블록과 논블록은 일반적인 함수 콜을 생각하면 된다. <br>
함수 콜을 한 순간 해당 함수가 return 하기전 까지 블록 되있다. <br>
단순히 블록 이라는 단어에만 집중을 하면 설명은 이렇게 할 수 있지만, 모든 함수는 블록이다. <br>
행위로 구별을 해 보면, <br>
함수 콜을 했는데 함수 내부의 모든 동작을 완료 하고 나서 리턴이 블록. <br>
내부의 동작과 관계 없이 바로 리턴 하면 논블록. <br>
이라고 설명해도 될거 같다. <br>
<br>
<br>
<br>

### 섞어서 생각해보기

<br>
#### 비동기 + 논블록
<br>
이 비동기 논블록 방식은 IOCP를 사용한 소켓 서버를 생각하면 편하다.<br>
GQCS 로 완료 통지 받음 -> 논블록 <br>
함수 호출 했을때 작업을 하는가? -> 보통은 큐에 넣고 워커 쓰레드에서 처리 <br>
<br>
#### 비동기 + 블록
<br>
비동기 블록은 socket 서버에서 블록킹 소켓은 사용한 서버를 생각하면 된다. <br>
예를 들면 select 모델을 사용한 서버라던지.. <br>
소켓에 신호가 올때까지 걸려있는데 일은 언제 될지 모른다. <br>
<br>
#### 동기 + 논블록
<br>
동기 논블록의 경우는 억지로 만들지 않는 이상 없는거 같다. <br>
자연스럽게 쓰는 경우에 대해서 혹시 아시는분 있으면 댓글좀 달아주시면 감사하겠습니다. <br>
<br>
#### 동기 + 블록
<br>
동기 블록의 경우는 일반적인 경우다.<br>
일반적으로 사용하는 콜백함수 없이 함수 콜을 통한 동작 등이 해당한다. <br>
<br>
<br>
<br>
<br>
### 마무리

<br>
역시.. 글을 써야 머리속에 있는 내용이 정리가 잘 되는거 같다. <br>
<br>






